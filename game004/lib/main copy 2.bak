import 'package:flame/components.dart';
import 'package:flame/game.dart';
import 'package:flame/input.dart';
import 'package:flutter/material.dart';
import 'dart:async';
import 'dart:math';



void main() {
  runApp(GameWidget(game: SpaceShooterGame()));
}

class SpaceShooterGame extends FlameGame with PanDetector {
  late Player player;
  late Enemy enemy;
  late EnemyManager enemyManager;

  @override
  Future<void> onLoad() async {
    await super.onLoad();
    player = Player();
    enemy = Enemy();
    add(player);
    add(enemy);
    enemyManager = EnemyManager();
    add(enemyManager);
    
  }

  @override
  void onPanUpdate(DragUpdateInfo info) {
    player.move(info.delta.game);
  }
}


class Player extends SpriteComponent with HasGameRef<SpaceShooterGame> {
  @override
  Future<void> onLoad() async {
    await super.onLoad();
    sprite = await gameRef.loadSprite('player.png');
    position = Vector2(gameRef.size.x / 2, gameRef.size.y - 100);
    width = 60;
    height = 70;
    anchor = Anchor.center;
  }

  void move(Vector2 delta) {
    position.add(delta);
  }

}

class Enemy extends SpriteComponent with HasGameRef<SpaceShooterGame>{
  late Vector2 _velocity;

  set velocity(Vector2 velocity) => _velocity.setFrom(velocity);

  @override
  Future<void> onLoad() async {
    sprite = await Sprite.load('enemy.png');
    position = Vector2(0, 0);
    size = Vector2(50, 50);
    _velocity = Vector2(0, 250);
  }

  @override
  void update(double dt) {
    super.update(dt);
    position.add(_velocity * dt);
  }
}


class EnemyManager extends PositionComponent with HasGameRef<SpaceShooterGame>{
  late Timer _timer;
  Random random = Random();

  @override
  Future<void> onLoad() async {
    await super.onLoad();
    _timer = Timer(2, callback: _spawnEnemy, repeat: true);
  }

  void _spawnEnemy() {
    // Generate enemies at the top of the screen, on the left or right side
    final screenWidth = gameRef.size.x;
    final position = Vector2(
      random.nextBool() ? -64.0 : screenWidth + 64.0,
      0,
    );
    final enemy = Enemy()
      ..position = position
      ..size = Vector2(64, 64)
      ..anchor = Anchor.center
      ..angle = 0
      ..velocity = Vector2(0, 250)
      ..angle = -pi / 2;
    add(enemy);
  }

  @override
  void onMount() {
    super.onMount();
    _timer.start();
  }

  @override
  void onRemove() {
    super.onRemove();
    _timer.stop();
  }

  @override
  void update(double dt) {
    super.update(dt);
    _timer.update(dt);
  }
}

class Timer {
  final double interval;
  final void Function() callback;
  final bool repeat;
  double _time = 0.0;
  bool _running = false;

  Timer(this.interval, {required this.callback, this.repeat = false});

  void start() {
    _running = true;
  }

  void stop() {
    _running = false;
  }

  void update(double dt) {
    if (!_running) {
      return;
    }
    _time += dt;
    if (_time >= interval) {
      callback();
      if (!repeat) {
        _running = false;
      }
      _time = 0.0;
    }
  }
}


























