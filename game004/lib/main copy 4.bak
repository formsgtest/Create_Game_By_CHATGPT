import 'package:flame/components.dart';
import 'package:flame/game.dart';
import 'package:flame/input.dart';
import 'package:flutter/material.dart';
import 'dart:math';

void main() {
  runApp(GameWidget(game: SpaceShooterGame()));
}

class SpaceShooterGame extends FlameGame with PanDetector, HasGameRef<SpaceShooterGame> {
  late Player player;
  late EnemyManager enemyManager;

  @override
  Future<void> onLoad() async {
    await super.onLoad();

    player = Player();
    enemyManager = EnemyManager(gameRef.size);
    enemyManager.spawnEnemies();

    add(player);
    add(enemyManager);
  }

  @override
  void onPanUpdate(DragUpdateInfo info) {
    player.move(info.delta.game);
  }

  void removeEnemy(Enemy enemy) {
    remove(enemy);
  }

  void updateEnemyRespawnPoint(Vector2 newRespawnPoint) {
    enemyManager.respawnPoint = newRespawnPoint;
  }
}

class EnemyManager extends PositionComponent with HasGameRef<SpaceShooterGame> {
  late Vector2 _gameSize;
  late List<Enemy> _enemies;
  late Random _random;
  late Timer _timer;

  late Vector2 respawnPoint;

  EnemyManager(this._gameSize) {
    _enemies = [];
    _random = Random();
    _timer = Timer(2, repeat: true, callback: spawnEnemies);
    respawnPoint = Vector2(0, 0);
  }

  void spawnEnemies() {
    _enemies.add(Enemy(respawnPoint));
    add(_enemies.last);
  }

  void removeEnemy(Enemy enemy) {
    _enemies.remove(enemy);
    remove(enemy);
  }

  @override
  Future<void> onLoad() async {
    await super.onLoad();
    _timer.start();
  }

  @override
  void update(double dt) {
    super.update(dt);
    _timer.update(dt);
  }
}

class Player extends SpriteComponent with HasGameRef<SpaceShooterGame> {
  @override
  Future<void> onLoad() async {
    await super.onLoad();

    sprite = await gameRef.loadSprite('player.png');

    position = gameRef.size / 2;
    width = 60;
    height = 70;
    anchor = Anchor.center;
  }

  void move(Vector2 delta) {
    position.add(delta);
  }
}

class Enemy extends SpriteComponent with HasGameRef<SpaceShooterGame> {
  double speed = 100;

  Enemy(Vector2 position) {
    this.position = position;
  }

  @override
  Future<void> onLoad() async {
    await super.onLoad();

    sprite = await gameRef.loadSprite('enemy.png');

    width = 50;
    height = 50;
    anchor = Anchor.center;
  }

  @override
  void update(double dt) {
    super.update(dt);

    position.add(Vector2(0, speed * dt));

    if (position.y > gameRef.size.y) {
      (parent as EnemyManager).removeEnemy(this);
    }
  }
}
