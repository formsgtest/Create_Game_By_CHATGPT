import 'package:flutter/material.dart';
import 'package:flame/game.dart';
import 'package:flame/flame.dart';
import 'package:flame/components.dart';
import 'package:flame/input.dart';
import 'package:flame/collisions.dart';
import 'package:flame/parallax.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Flame.device.fullScreen();
  await Flame.device.setLandscape();
  runApp(
    MaterialApp(
      home: Scaffold(
        body: GameWidget(game: SpaceShooterGame()),
      ),
    ),
  );
}

class SpaceShooterGame extends FlameGame
    with HasKeyboardHandlerComponents, HasCollisionDetection {
  final World _world = World();
  late Player shooter = Player();
  late Enemy enemy = Enemy();
  EnemyManager enemyManager = EnemyManager();
  @override
  Future<void> onLoad() async {
    // 在這裡加載資源
    await add(_world);
    add(enemyManager);
    await add(shooter);
    await add(enemy);
    shooter.position = Vector2(_world.size.x / 8, _world.size.y / 3);
    enemy.position = Vector2(_world.size.x / 2, _world.size.y / 3);
  }

  @override
  void update(double dt) {
    // 在這裡處理遊戲邏輯
  }

  @override
  void render(Canvas canvas) {
    // 在這裡渲染遊戲畫面
  }
  
  @override
  Color backgroundColor() => Color.fromARGB(255, 158, 230, 244);
}

class World extends ParallaxComponent<SpaceShooterGame> {
  @override
  Future<void> onLoad() async {
    parallax = await gameRef.loadParallax(
      [
        ParallaxImageData('bg.png'),
      ],
      baseVelocity: Vector2(150, 0),
      velocityMultiplierDelta: Vector2(1.8, 1.0),
    );
  }
}

class EnemyManager extends Component with HasGameRef<SpaceShooterGame> {
  @override
  void update(double dt) {
    // 在這裡處理遊戲邏輯
  }

  @override
  void render(Canvas canvas) {
    // 在這裡渲染遊戲畫面
  }
}

class Player extends SpriteComponent
    with HasGameRef<SpaceShooterGame>, CollisionCallbacks {
  @override
  Future<void> onLoad() async {
    // 在這裡加載資源
    sprite = await gameRef.loadSprite('player.png');
  }

  @override
  void update(double dt) {
    // 在這裡處理遊戲邏輯
  }

  @override
  void render(Canvas canvas) {
    // 在這裡渲染遊戲畫面
  }
}

class Enemy extends SpriteComponent with HasGameRef, CollisionCallbacks {
  @override
  Future<void> onLoad() async {
    // 在這裡加載資源
    sprite = await gameRef.loadSprite('enemy.png');
  }

  @override
  void update(double dt) {
    // 在這裡處理遊戲邏輯
  }

  @override
  void render(Canvas canvas) {
    // 在這裡渲染遊戲畫面
  }
}
