import 'dart:math';
import 'package:flutter/material.dart';
import 'package:flame/game.dart';
import 'package:flame/flame.dart';
import 'package:flame/components.dart';
import 'package:flame/input.dart';
import 'package:flame/collisions.dart';
import 'package:flame/parallax.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Flame.device.fullScreen();
  await Flame.device.setLandscape();
  runApp(
    MaterialApp(
      home: Scaffold(
        body: GameWidget(game: SpaceShooterGame()),
      ),
    ),
  );
}

class EnemyManager extends Component with HasGameRef<SpaceShooterGame> {
  late Timer _timer;
  final Random random = Random();

  EnemyManager() : super() {
    _timer = Timer(1, onTick: _spawnEnemy, repeat: true);
  }

  void _spawnEnemy() {
    final enemy = Enemy();
    //set enemy position top to bottom random x position
    enemy.position = Vector2(random.nextDouble() * gameRef.size.x, 0);
    gameRef.add(enemy);
  }

  @override
  void update(double dt) {
    super.update(dt);
    _timer.update(dt);
  }

  @override
  void render(Canvas canvas) {
    super.render(canvas);
  }
}

class World extends ParallaxComponent<SpaceShooterGame> {
  @override
  Future<void> onLoad() async {
    parallax = await gameRef.loadParallax(
      [
        ParallaxImageData('bg.png'),
      ],
      baseVelocity: Vector2(150, 0),
      velocityMultiplierDelta: Vector2(1.8, 1.0),
    );
  }
}

class SpaceShooterGame extends FlameGame
    with PanDetector, HasGameRef<SpaceShooterGame>, HasCollisionDetection {
  late Player player;
  late Enemy enemy;
  late EnemyManager enemyManager;
  late World world;

  @override
  Future<void> onLoad() async {
    await super.onLoad();
    player = Player();
    enemy = Enemy();
    enemyManager = EnemyManager();
    world = World();

    add(enemy);
    add(player);
  }

  @override
  void onPanUpdate(DragUpdateInfo info) {
    player.move(info.delta.game);
  }

  @override
  void update(double dt) {
    super.update(dt);
    enemy.position.add(Vector2(0, 100 * dt));
  }
}

class Player extends SpriteComponent
    with HasGameRef<SpaceShooterGame>, CollisionCallbacks {
  @override
  Future<void> onLoad() async {
    await super.onLoad();
    sprite = await gameRef.loadSprite('player.png');
    position = Vector2(gameRef.size.x / 2, gameRef.size.y - 100);
    width = 60;
    height = 70;
    anchor = Anchor.center;
  }

  void move(Vector2 delta) {
    position.add(delta);
  }
}

class Enemy extends SpriteComponent
    with HasGameRef<SpaceShooterGame>, CollisionCallbacks {
  @override
  Future<void> onLoad() async {
    await super.onLoad();
    sprite = await gameRef.loadSprite('enemy.png');
    position = Vector2(gameRef.size.x / 2, 100);
    width = 60;
    height = 70;
    anchor = Anchor.center;
  }
}
